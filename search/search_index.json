{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hello","text":"<p><code>thomas@aarc.io</code></p>"},{"location":"About/about/","title":"About","text":"<p>Hello. My name is Thomas. I am going through the process of hosting my personal notes.</p>"},{"location":"About/license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2025 aarcThom</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"Notes/Frameworks_SDKs/revit_api/revit/","title":"Revit","text":""},{"location":"Notes/Frameworks_SDKs/revit_api/revit/#common-operations","title":"Common Operations","text":""},{"location":"Notes/Frameworks_SDKs/revit_api/revit/#selecting-elements","title":"Selecting Elements","text":"<p>The general workflow for dealing with user selections in a Revit plugin is:</p> <ul> <li>Define a Selection filter class.</li> <li>Initialize a Reference object to accept the picked result.</li> <li>Initialize a selection filter object from your defined class.</li> <li>Initialize a Selection object.</li> <li>Call one of the <code>Pick...</code> methods on the Selection object and assign the result to the reference object.<ul> <li>Note: It is at this stage that you will pass the Selection Filter object as an argument.</li> </ul> </li> <li>Get the Element from the reference using <code>doc.GetElement(reference)</code></li> <li>Check if the element is null.</li> <li>Do stuff with your selection.</li> </ul> <p>For example:</p> <pre><code>// Filter object set up elsewhere in code\n\n// Initialize a reference object to accept the pick result\nReference signRef = null;\n\n// Initialize a Filter Object\nFilterNamedFamily signFilter = new FilterNamedFamily(\"wall_based\");\n\n// Initialize a Selection Object\nSelection signSel = uiApp.ActiveUIDocument.Selection;\n\n// Call a pick method on the selection object. Assign result to ref object.\nsignRef = signSel.PickObject(ObjectType.Element, signFilter, \"Pick a sign family!\");\n\n// Get the element from the reference\nElement signElem = doc.GetElement(signRef);\n\n// Cast element as familyinstance\nFamilyInstance family = signElem as FamilyInstance;\nif (family == null)\n{\n    return Result.Failed; // just in case\n}\n\n// do stuff here!\n</code></pre>"},{"location":"about/about/","title":"About","text":"<p>Hello. My name is Thomas. I am going through the process of hosting my personal notes.</p>"},{"location":"about/license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2025 aarcThom</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"demo/demo/","title":"Demo","text":""},{"location":"notes/frameworks_sdks/revit_api/concepts/","title":"Revit API Concepts","text":""},{"location":"notes/frameworks_sdks/revit_api/concepts/#e","title":"E","text":""},{"location":"notes/frameworks_sdks/revit_api/concepts/#element","title":"Element","text":"<p>An Element is the base object for nearly everything in a Revit project database. It represents a whole item, whether it's a physical part of the building, an annotation, or a project setting.</p> <p>What it Represents: A complete, individual component.</p> <ul> <li>Model Elements: Walls, Doors, Windows, Beams, Floors.</li> <li>Annotation Elements: Dimensions, Text Notes, Tags.</li> <li>Datum Elements: Levels, Grids, Reference Planes.</li> <li>Abstract/Type Elements: Wall Types, Family Symbols, View Templates.</li> </ul> <p>Key Identifier: Every element has a unique ElementId. This ID is used to retrieve the entire element from the Revit database.</p> <p>Analogy: Think of an Element as the entire car in contrast to a reference which could be thought of as a component of a car.</p> <p>When you use it: You work with Element objects when you want to query or modify the object as a whole\u2014for example, getting a wall's type, changing its parameters, or deleting it from the project.</p> <p>Example:</p> <pre><code>// Get an Element by its ID\nElementId wallId = new ElementId(12345);\nWall wallElement = doc.GetElement(wallId) as Wall;\n\n// Access a property of the whole element\ndouble wallLength = wallElement.get_Parameter(BuiltInParameter.CURVE_ELEM_LENGTH).AsDouble();\n</code></pre>"},{"location":"notes/frameworks_sdks/revit_api/concepts/#i","title":"I","text":""},{"location":"notes/frameworks_sdks/revit_api/concepts/#iselectionfilter-interface","title":"ISelectionFilter Interface","text":"<p>The <code>ISelectionFilter</code> interface allows you to control what elements a user can pick during a selection operation. The interface has two methods you must implement.</p> <p><code>AllowElement(Element elem)</code></p> <ul> <li>Purpose<ul> <li>Called for each element that is candidate for selection.</li> </ul> </li> <li>Params<ul> <li><code>Element elem</code> - the element being checked. </li> </ul> </li> <li>Returns<ul> <li><code>true</code> - the element is selectable.</li> <li><code>false</code> - the element is not selectable.</li> </ul> </li> </ul> <p>For example, if you only want the user to be able to select walls:</p> <pre><code>public bool AllowElement(Element elem)\n{\n    if (elem.Category.Id.IntegerValue == (int)BuiltInCategory.OST_Walls)\n    {\n        return true;\n    }\n    return false;\n}\n</code></pre> <p>All categories within the <code>BuiltInCategory</code> enumeration can be found here.</p> <p><code>AllowReference(Reference reference, XYZ position)</code></p> <ul> <li>Purpose<ul> <li>This method is used to filter sub-elements, which are parts of an element that can be selected individually, such as faces, edges, or curves.</li> </ul> </li> <li>Params<ul> <li><code>Reference reference</code> - if <code>AllowElement</code> returns <code>true</code>, Revit then identifies the specific sub-element that the user is pointing at.</li> <li><code>XYZ position</code> - Likewise, this returns where the user clicked to make the selection allowing a sub-element selection.</li> </ul> </li> <li>Returns<ul> <li><code>true</code> - The referenced sub-element is selectable.</li> <li><code>false</code> - The referenced sub-element is not selectable.</li> </ul> </li> </ul>"},{"location":"notes/frameworks_sdks/revit_api/concepts/#r","title":"R","text":""},{"location":"notes/frameworks_sdks/revit_api/concepts/#reference","title":"Reference","text":"<p>A Reference is a more granular and specific pointer. It doesn't just point to an element; it can point to a specific geometric part of an element, such as a face, an edge, or a curve. It acts as a stable and reliable link to a piece of geometry.</p> <p>What it Represents: A precise geometric entity.</p> <ul> <li>An entire element.</li> <li>A sub-element, like a specific face of a wall or an edge of a beam.</li> <li>The geometry of an element within a linked Revit model.</li> </ul> <p>Key Properties:</p> <ul> <li>ElementId: Tells you which Element the reference belongs to.</li> <li>ElementReferenceType: Specifies what kind of geometry is being referenced (e.g., FACE, EDGE, CURVE).</li> <li>ConvertToStableRepresentation(): A crucial method that generates a unique string. This string can be saved and used to find the exact same geometric reference even after the project has been closed and reopened.</li> </ul> <p>Analogy: Think of a Reference as the specific car door handle, the windshield, or the entire car itself. It's a more precise address.</p> <p>When you use it: You almost always encounter Reference objects during user selections. When a user clicks on an object in the Revit UI, the API gives you a Reference because it needs to tell you exactly what was clicked\u2014not just the element, but the specific face or edge. It's also essential for creating dimensions and constraints, which need to be attached to specific geometry.</p> <p>Example:</p> <pre><code>// Prompt the user to pick something\nReference pickedRef = uidoc.Selection.PickObject(ObjectType.Face, \"Select a face\");\n\n// Get the Element that owns the reference\nElement elem = doc.GetElement(pickedRef.ElementId);\n\n// Get the specific geometry (the Face) from the reference\nFace selectedFace = elem.GetGeometryObjectFromReference(pickedRef) as Face;\n</code></pre>"},{"location":"notes/frameworks_sdks/revit_api/concepts/#t","title":"T","text":""},{"location":"notes/frameworks_sdks/revit_api/concepts/#transactions","title":"Transactions","text":"<p>Transactions are objects that capture the changes to the Revit model. Changes to the Revit model can only be performed when there is an active transaction to do so. Transactions can either be committed \u2013 which means that their changes are written/recorded into the model \u2013 or rolled-back \u2013 which means their changes are undone. [^1]</p> <p>At the beginning of your code, you need to use a Transaction Attribute. This set to manual if you want to interactive with the model and readonly if you only want to read from the model. For example:</p> <pre><code>[Transaction(TransactionMode.Manual)]\n</code></pre> <p>By setting the TransactionMode to Manual, the developer is explicitly stating that they will be responsible for managing transactions within the code. This means the script must:</p> <ul> <li>Instantiate a Transaction object: <code>Transaction trans = new Transaction(doc);</code></li> <li>Start the transaction: Using the <code>trans.Start(\"Descriptive Name\");</code> method before making any changes to the model. The string argument provides a name for the transaction that will appear in Revit's undo history.</li> <li>Commit or roll back the transaction: After the modifications are complete, <code>trans.Commit();</code> saves the changes to the model. If an error occurs or the changes need to be discarded, <code>trans.RollBack();</code> would be used instead.</li> </ul>"},{"location":"notes/frameworks_sdks/revit_api/concepts/#footnotes","title":"Footnotes","text":"<p>[^1]: Autodesk Revit Guides</p>"},{"location":"notes/frameworks_sdks/revit_api/revit/","title":"Revit","text":""},{"location":"notes/frameworks_sdks/revit_api/revit/#common-operations","title":"Common Operations","text":""},{"location":"notes/frameworks_sdks/revit_api/revit/#selecting-elements","title":"Selecting Elements","text":"<p>The general workflow for dealing with user selections in a Revit plugin is:</p> <ul> <li>Define a Selection filter class.</li> <li>Initialize a Reference object to accept the picked result.</li> <li>Initialize a selection filter object from your defined class.</li> <li>Initialize a Selection object.</li> <li>Call one of the <code>Pick...</code> methods on the Selection object and assign the result to the reference object.<ul> <li>Note: It is at this stage that you will pass the Selection Filter object as an argument.</li> </ul> </li> <li>Get the Element from the reference using <code>doc.GetElement(reference)</code></li> <li>Check if the element is null.</li> <li>Do stuff with your selection.</li> </ul> <p>For example:</p> <pre><code>// Filter object set up elsewhere in code\n\n// Initialize a reference object to accept the pick result\nReference signRef = null;\n\n// Initialize a Filter Object\nFilterNamedFamily signFilter = new FilterNamedFamily(\"wall_based\");\n\n// Initialize a Selection Object\nSelection signSel = uiApp.ActiveUIDocument.Selection;\n\n// Call a pick method on the selection object. Assign result to ref object.\nsignRef = signSel.PickObject(ObjectType.Element, signFilter, \"Pick a sign family!\");\n\n// Get the element from the reference\nElement signElem = doc.GetElement(signRef);\n\n// Cast element as familyinstance\nFamilyInstance family = signElem as FamilyInstance;\nif (family == null)\n{\n    return Result.Failed; // just in case\n}\n\n// do stuff here!\n</code></pre>"},{"location":"notes/programming/basic_concepts/","title":"Basic Concepts","text":""},{"location":"notes/programming/basic_concepts/#sources","title":"Sources","text":"<p>These notes are taken from the reading the following sources:</p> <ul> <li> <p>Composing Programs</p> </li> <li> <p>Think Python</p> </li> </ul>"},{"location":"notes/programming/basic_concepts/#data-and-functions","title":"Data and Functions","text":"<p>We use computers to visualize, transform, and convert data. For example, in Rhino3D you might scale (transform) a 2D box representing a room (data).</p> <p>We can generalize these processes into two types of elements.  * Data - The stuff we want to transform, visualize, read, write, etc. * Functions - The sequence of actions to be performed on data.</p>"},{"location":"notes/programming/basic_concepts/#programming","title":"Programming","text":"<p>Programming is the act of telling computers to do perform actions (functions) on stuff (data) using a written, formally defined syntax called a programming language. A programming language is the system of notation for writing programs. A program written in a programming language is meant to be compiled or interpreted by computers, but read by people.</p> <p>As such, a programming language needs provide a way for people to \"organize our ideas about computational processes.\"[^1] Just as words, sentences, paragraphs, plot tropes, and genres help structure and organize written language, programming languages have ways of combining simple ideas into more complex ones.</p> <ul> <li>primitive expressions and statements, which represent the simplest building blocks that the language provides,</li> <li>means of combination, by which compound elements are built from simpler ones, and</li> <li>means of abstraction, by which compound elements can be named and manipulated as units. [^1]</li> </ul> <p>DIAGRAM GOES HERE - SHOW FUNCTIONS AND DATA AS ELEMENTS AND HOW THEY RELATE TO PROGRAMMING LANGUAGE</p>"},{"location":"notes/programming/basic_concepts/#expressions-and-statements","title":"Expressions and Statements","text":"<p>Expressions and statements are basic units of how we interact with data and functions in programming. Expressions are evaluated. Statements are executed.</p>"},{"location":"notes/programming/basic_concepts/#expressions","title":"Expressions","text":""},{"location":"notes/programming/basic_concepts/#statements","title":"Statements","text":""},{"location":"notes/programming/basic_concepts/#footnotes","title":"Footnotes","text":"<p>[^1]:CP: 1.2   Elements of Programming</p>"},{"location":"notes/tooling/git/git/","title":"GIT","text":""},{"location":"notes/tooling/git/git/#git-configuration","title":"Git Configuration","text":""},{"location":"notes/tooling/git/git/#gotchas","title":"Gotchas","text":""},{"location":"notes/tooling/git/git/#tracking-folder-case-changes","title":"Tracking Folder Case Changes","text":"<p>Git, by default, does not track case changes. In a static website this will lead to 404 errors.</p> <p>To fix this, navigate to the projects folder and run:</p> <pre><code>git config core.ignorecase false\n</code></pre>"}]}